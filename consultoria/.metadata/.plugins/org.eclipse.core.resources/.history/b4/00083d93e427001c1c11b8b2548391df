package br.com.mattec.consul.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.mattec.consul.dto.CadastraDto;
import br.com.mattec.consul.dto.ProdutoDto;
import br.com.mattec.consul.entities.Categoria;
import br.com.mattec.consul.entities.ClientEntity;
import br.com.mattec.consul.entities.EnderecoEntity;
import br.com.mattec.consul.entities.ProdutoEntity;
import br.com.mattec.consul.exceptions.ValidaException;
import br.com.mattec.consul.reporitory.CategoriaRepository;
import br.com.mattec.consul.reporitory.ProdutoRepository;

@Service
public class ProdutoService {

	@Autowired
	private ProdutoRepository repoProduto;
	
	@Autowired
	private CategoriaRepository repoCategoria;
	
	
	public List<ProdutoDto> findAll(){
		List<ProdutoEntity> produtoEntities = this.repoProduto.findAll();
		
		List<ProdutoDto> listProduto = new ArrayList<>();
		
		produtoEntities.forEach(pro -> {
			ProdutoDto produtoDto = ProdutoDto.builder().build();
			produtoDto.setId(pro.getId());
			produtoDto.setNome(pro.getNome());
			produtoDto.setPreco(pro.getPreco());
			produtoDto.setCodigoDeBarra(pro.getCodigoDeBarra());
			produtoDto.setDataDeCompra(pro.getDataDeCompra());
			produtoDto.setDataDeValidade(pro.getDataDeValidade());
			produtoDto.setNomeCategoria(pro.getCategorias().getNomeDaCategoria());
			
			listProduto.add(produtoDto);
		});
		
		
		return listProduto;
	}
	
	
	public void insert(ProdutoDto cadDto) throws ValidaException {
		ProdutoEntity produto = ProdutoEntity.builder().nome(cadDto.getNome()).preco(cadDto.getPreco())
				.codigoDeBarra(cadDto.getCodigoDeBarra())
				.dataDeCompra(cadDto.getDataDeCompra()).dataDeValidade(cadDto.getDataDeValidade())
				.build();
		Categoria categoria = Categoria.builder().id(cadDto.getId()).build();
		
		
		
		Optional<EnderecoEntity> cep = enderecoService.findByCep(cadDto.getCep().replace("-", ""));
		
			Optional<CadastraDto> temCpfOuCnpjNoBanco = clientService.findOneWithCpfOuCnpj(cadDto.getCpfOuCnpj());
			try {
				if (temCpfOuCnpjNoBanco.isPresent())
					throw new ValidaException("CPF ou CNPJ já cadastrado ");

				if (cep.isPresent()) {
					client.setEndereco(cep.get());
					this.clientService.insert(client);
				} else {

					EnderecoEntity endereco = EnderecoEntity.builder().cep(cadDto.getCep().replace("-", ""))
							.logradouro(cadDto.getLogradouro()).bairro(cadDto.getBairro())
							.localidade(cadDto.getLocalidade()).uf(cadDto.getUf()).build();
					client.setEndereco(endereco);
					this.clientService.insert(client);
					this.enderecoService.insert(endereco);
				}
			} catch (ValidaException e) {
				throw new ValidaException(e.getMessage() + " com o número: " + cadDto.getCpfOuCnpj());
			}
		}

	
	
	public Optional<List<ProdutoDto>> findlist(ProdutoDto dto){
		
		ProdutoEntity produto = ProdutoEntity.builder().id(dto.getId())
				.nome(dto.getNome())
				.preco(dto.getPreco())
				.codigoDeBarra(dto.getCodigoDeBarra())
				.dataDeCompra(dto.getDataDeCompra())
				.dataDeValidade(dto.getDataDeValidade()).build();
				
		Categoria category = Categoria.builder().nomeDaCategoria(dto.getNomeCategoria().toString()).build();
		produto.setCategorias(category);
		this.repoCategoria.getById(category.getId());
		this.repoProduto.getById()
			

		return repoProduto.findAllById(produto);
	}
	
	
	public ProdutoEntity insert(ProdutoEntity categoria) {
		return repoProduto.save(categoria);
	}


	
	public Object findAllAndCategoria() {
		return null;
	}
	
	
	



}